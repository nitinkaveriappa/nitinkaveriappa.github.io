{"version":3,"sources":["Common/Components/ErrorComponent.js","Routes.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["ErrorComponent","errorMessage","Typography","Link","href","Welcome","lazy","Routes","fallback","exact","path","render","to","ErrorBoundary","props","state","hasError","error","errorInfo","console","log","this","children","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4PAeeA,EAZQ,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACxB,OACE,oCACE,kBAACC,EAAA,EAAD,0BACcD,GACZ,6BACA,kBAACE,EAAA,EAAD,CAAMC,KAAK,KAAX,sBCLFC,EAAUC,gBAAK,kBAAM,gCAyBZC,EAfA,kBACb,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,mDAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,cACjD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,SAASC,OAAQ,kBAAM,kBAACN,EAAD,SACzC,kBAAC,IAAD,CACEK,KAAK,IACLC,OAAQ,kBAAM,kBAAC,EAAD,CAAgBV,aAAa,yB,gCCetCY,E,kDAzBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,UAAU,GAFR,E,8DAUDC,EAAOC,GAEvBC,QAAQC,IAAIH,EAAOC,K,+BAInB,OAAIG,KAAKN,MAAMC,SAEN,kBAAC,EAAD,CAAgBf,aAAa,mCAG/BoB,KAAKP,MAAMQ,Y,gDAhBYL,GAE9B,MAAO,CAAED,UAAU,O,GARKO,aCDbC,EANH,kBACV,kBAAC,EAAD,KACE,kBAAC,EAAD,QCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASnB,OACP,kBAAC,IAAMoB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLE,QAAQF,MAAMA,EAAMwB,c","file":"static/js/main.041c351e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link, Typography } from '@material-ui/core';\r\n\r\nconst ErrorComponent = ({ errorMessage }) => {\r\n  return (\r\n    <>\r\n      <Typography>\r\n        Error - {`${errorMessage}`}\r\n        <br />\r\n        <Link href=\"#\">Go to Home Page</Link>\r\n      </Typography>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorComponent;\r\n","import React, { Suspense, lazy } from 'react';\r\nimport { Route, Switch, Redirect, HashRouter } from 'react-router-dom';\r\nimport { ErrorComponent } from './Common';\r\n\r\nconst Welcome = lazy(() => import(/* webpackChunkName: \"index\" */ './Welcome'));\r\n\r\n/* Using HashRouter because GitHub Pages doesnâ€™t support routers \r\nthat use the HTML5 `pushState` history API under the hood \r\n(for example, React Router using `browserHistory`) so if you refresh the \r\nBrowser Page it gives a 404 Error page. \r\nThis is because when there is a fresh page load for a url like \r\n`http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, \r\nthe GitHub Pages server returns 404 because it knows nothing of `/todos/42`.\r\n*/\r\nconst Routes = () => (\r\n  <HashRouter>\r\n    <Suspense fallback={<>Loading...</>}>\r\n      <Switch>\r\n        <Route exact path=\"/\" render={() => <Redirect to=\"/index\" />} />\r\n        <Route exact path=\"/index\" render={() => <Welcome />} />\r\n        <Route\r\n          path=\"*\"\r\n          render={() => <ErrorComponent errorMessage=\"Incorrect URL\" />}\r\n        />\r\n      </Switch>\r\n    </Suspense>\r\n  </HashRouter>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { Component } from 'react';\r\nimport { ErrorComponent } from './Common';\r\n\r\n/* \r\nNote:\r\nError boundaries do not catch errors for:\r\n  - Event handlers (learn more)\r\n  - Asynchronous code (e.g. setTimeout or requestAnimationFrame callbacks)\r\n  - Server side rendering\r\n  - Errors thrown in the error boundary itself (rather than its children)\r\n*/\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    console.log(error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return <ErrorComponent errorMessage=\"Error Caught by Error Boundary\" />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\nimport Routes from './Routes';\r\nimport ErrorBoundary from './ErrorBoundary';\r\n\r\nconst App = () => (\r\n  <ErrorBoundary>\r\n    <Routes />\r\n  </ErrorBoundary>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}